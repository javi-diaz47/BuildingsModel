package Graficos;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Ventana extends javax.swing.JFrame {
//Atributos generales
    int [] x = new int[100]; 
    int [] y = new int[100]; 
    int r = 30; 
    int indicador = 0; 
    int contador = 0; 
    boolean Nodob = false; 
    boolean Moverb = false; 
    boolean Lineab = false; 
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents(); 
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        Panelp = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        Nodo = new javax.swing.JButton();
        Mover = new javax.swing.JButton();
        Linea = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        mostrar = new javax.swing.JButton();
        PanelLinea = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Texto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        NewModel = new javax.swing.JMenuItem();
        OpenModel = new javax.swing.JMenuItem();
        SaveModel = new javax.swing.JMenuItem();
        CloseApp = new javax.swing.JMenuItem();
        AboutUs = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grafos");

        Panelp.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout PanelpLayout = new javax.swing.GroupLayout(Panelp);
        Panelp.setLayout(PanelpLayout);
        PanelpLayout.setHorizontalGroup(
            PanelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        PanelpLayout.setVerticalGroup(
            PanelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Nodo.setText("Nodo");
        Nodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodoActionPerformed(evt);
            }
        });

        Mover.setText("Mover");
        Mover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoverActionPerformed(evt);
            }
        });

        Linea.setText("Arista");
        Linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineaActionPerformed(evt);
            }
        });

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        mostrar.setText("Mostrar");
        mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Nodo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Mover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Linea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Eliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(mostrar)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nodo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Mover, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Linea, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mostrar)
                    .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        PanelLinea.setBackground(new java.awt.Color(204, 204, 204));
        PanelLinea.setForeground(new java.awt.Color(204, 204, 204));

        Texto.setColumns(20);
        Texto.setRows(5);
        jScrollPane1.setViewportView(Texto);

        javax.swing.GroupLayout PanelLineaLayout = new javax.swing.GroupLayout(PanelLinea);
        PanelLinea.setLayout(PanelLineaLayout);
        PanelLineaLayout.setHorizontalGroup(
            PanelLineaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLineaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        PanelLineaLayout.setVerticalGroup(
            PanelLineaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLineaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        NewModel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        NewModel.setText("New model");
        NewModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewModelActionPerformed(evt);
            }
        });
        jMenu1.add(NewModel);

        OpenModel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        OpenModel.setText("Open model");
        OpenModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenModelActionPerformed(evt);
            }
        });
        jMenu1.add(OpenModel);

        SaveModel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SaveModel.setText("Save model");
        SaveModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveModelActionPerformed(evt);
            }
        });
        jMenu1.add(SaveModel);

        CloseApp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        CloseApp.setText("Close app");
        CloseApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseAppActionPerformed(evt);
            }
        });
        jMenu1.add(CloseApp);

        jMenuBar1.add(jMenu1);

        AboutUs.setText("About us");
        AboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutUsActionPerformed(evt);
            }
        });
        jMenuBar1.add(AboutUs);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelLinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelLinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodoActionPerformed
        Nodob = true;
        Lineab = false; 
        Moverb = false;
        Raton(); 
        
    }//GEN-LAST:event_NodoActionPerformed

    private void MoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoverActionPerformed
        // TODO add your handling code here:
        Moverb = true;
        Nodob = false;
        Lineab = false;
        arrastrarNodo(); 
    }//GEN-LAST:event_MoverActionPerformed

    private void mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarActionPerformed
        // TODO add your handling code here:
        System.out.println("\n");
        for (int i = 0; i < contador; i++) {
            System.out.println(x[i] + " " + y[i]);
        }
    }//GEN-LAST:event_mostrarActionPerformed

    private void LineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineaActionPerformed
        // TODO add your handling code here:
        Lineab = true; 
        Nodob = false; 
        Moverb = false; 
        CrearLinea(); 
        
    }//GEN-LAST:event_LineaActionPerformed

    private void SaveModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveModelActionPerformed
        // TODO add your handling code here:
        SaveModel save = new SaveModel(); 
        save.Save(this.x, this.y, this.contador);
    }//GEN-LAST:event_SaveModelActionPerformed

    private void NewModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewModelActionPerformed
        // TODO add your handling code here:
        System.out.println("Control + n");
        NewModel V2 = new NewModel(); 
        V2.NewModel();
    }//GEN-LAST:event_NewModelActionPerformed

    private void AboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutUsActionPerformed
        // TODO add your handling code here:
        //System.out.println("Cualquier donacion es bienvenida, Gracias..!!!!");
    }//GEN-LAST:event_AboutUsActionPerformed

    private void OpenModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenModelActionPerformed
        // TODO add your handling code here:
        File dir = new File("Building-Models");
            
        if(!dir.exists()){
            dir.mkdir();
        }
        
        jFileChooser1.setCurrentDirectory(dir);
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == jFileChooser1.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                Texto.read( new FileReader( file.getAbsolutePath() ), null );
                
                Load(file);
                
            } catch (Exception ex) {
                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
        System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenModelActionPerformed

    private void CloseAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseAppActionPerformed
        // TODO add your handling code here:
        System.exit(0); 
    }//GEN-LAST:event_CloseAppActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
         
    }//GEN-LAST:event_EliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutUs;
    private javax.swing.JMenuItem CloseApp;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Linea;
    private javax.swing.JButton Mover;
    private javax.swing.JMenuItem NewModel;
    private javax.swing.JButton Nodo;
    private javax.swing.JMenuItem OpenModel;
    private javax.swing.JPanel PanelLinea;
    private javax.swing.JPanel Panelp;
    private javax.swing.JMenuItem SaveModel;
    private javax.swing.JTextArea Texto;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mostrar;
    // End of variables declaration//GEN-END:variables

    public void Raton(){
       
        MouseListener oyente;
        oyente = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(Moverb == true || Lineab == true){
                   Panelp.removeMouseListener(this); 
                }
                int getX = e.getX(); 
                int getY = e.getY();
                contar(e.getX(), e.getY()); 
                //int r = 30; 
                Nodo n = new Nodo(); 
                n.Circulo(Panelp.getGraphics(), getX, getY, r, r);
                System.out.println("x " + e.getX() + " y " + e.getY());
                
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        };
        Panelp.addMouseListener(oyente);
        //Panelp.get
    }
    
   //Metodo EstaDentro
   public boolean EstaDentro(MouseEvent e){
       for(int i = 0; i < contador; i++){
           if((e.getX() > x[i]) &&(e.getX() < (x[i] + r)) &&(e.getY() > y[i]) && (e.getY() < (y[i] + r))){
               indicador = i; 
               break; 
           }
       }
       
        if ((e.getX() > x[indicador]) &&(e.getX() < (x[indicador] + r)) &&(e.getY() > y[indicador]) && (e.getY() < (y[indicador] + r))){
             return true;
        }
       return false;
    }
    
   //Metodo Contar
     public void contar(int x1, int y1){
         x[contador] = x1;
         y[contador] = y1;
         contador += 1; 
     }
     
     public void arrastrarNodo(){
         MouseMotionListener arrastrar = new MouseMotionListener() {
             private boolean arrastrando = false; 
             private int xAnteriorRaton;
             private int yAnteriorRaton;
             
             @Override
             public void mouseDragged(MouseEvent e) {
                  if(Nodob == true || Lineab == true){
                   Panelp.removeMouseMotionListener(this);
                   //Panelp.removeMouseListener(this);
                }
                 // Si comienza el arrastre ...
                if (!arrastrando)
                {
                   // ... y el ratón está dentro del rectángulo
                   if (EstaDentro(e))
                   {
                      // Se guardan las posiciones del ratón
                      xAnteriorRaton = e.getX();
                      yAnteriorRaton = e.getY();
                      // y se marca que ha comenzado el arrastre.
                      arrastrando = true;
                   }
                }
                else
                {   
                   // Si ya había empezado el arrastre, se calculan las nuevas
                   // coordenadas del rectángulo
                   x[indicador] = (x[indicador] + e.getX()) - xAnteriorRaton;
                   y[indicador] = (y[indicador] + e.getY()) - yAnteriorRaton;
                   
                   repaint();
                   
                   // Se guarda la posición del ratón para el siguiente cálculo
                   xAnteriorRaton = e.getX();
                   yAnteriorRaton = e.getY();

                   // y se manda repintar el Canvas
                  repaint();
                }
             }

             @Override
             public void mouseMoved(MouseEvent e) {
                  if(Nodob == true || Lineab == true){
                   Panelp.removeMouseMotionListener(this);
                }
                 arrastrando = false;
                 Nodo repintar = new Nodo();
                 for (int i = 0; i < contador; i++) {
                     
                         repintar.Circulo(Panelp.getGraphics(), x[i], y[i], r, r);
                     
                 }
                
             }
         }; 
         Panelp.addMouseMotionListener(arrastrar);
     }
     
     public void CrearLinea(){
         MouseListener linea = new MouseListener() {
             
             @Override
             public void mouseClicked(MouseEvent e) {
             }
             int inicioX = 0; 
             int inicioY = 0; 
             int LlegadaX = 0; 
             int LlegadaY = 0; 
             @Override
             public void mousePressed(MouseEvent e) {
                 //inicioX = 0; 
                 //inicioY = 0;
                 inicioX = e.getX(); 
                 inicioY = e.getY(); 
                 
             }

             @Override
             public void mouseReleased(MouseEvent e) {
                 if(Moverb == true || Nodob == true){
                   Panelp.removeMouseListener(this); 
                  }
                 //LlegadaX = 0; 
                 //LlegadaY = 0;
                 LlegadaX = e.getX(); 
                 LlegadaY = e.getY(); 
                 
                 Nodo l = new Nodo(); 
                 l.Linea(Panelp.getGraphics(), inicioX, inicioY, LlegadaX, LlegadaY);
                 
             }

             @Override
             public void mouseEntered(MouseEvent e) {
             }

             @Override
             public void mouseExited(MouseEvent e) {
             }
         }; 
         Panelp.addMouseListener(linea);
     }
     
     
     //Cargando un Modelo
     public void Load(File file){
         

        int cont = 0; 
        Scanner scan;
        try {
            
            scan = new Scanner(file);
            
            while(scan.hasNextLine()){
             String data = scan.nextLine();

             String[] properties = data.split(";");
             
             if(properties[0].equals("Node")){
                
                
                int getX = Integer.parseInt(properties[1]);
                int getY = Integer.parseInt(properties[2]);
                x[cont] = Integer.parseInt(properties[1]);
                y[cont] = Integer.parseInt(properties[2]);
                
                Nodo n = new Nodo(); 
                n.Circulo(Panelp.getGraphics(), getX, getY, r, r);
                //repaint();
                 System.out.println("Done!");
                cont += 1; 
             }
             this.contador = cont;
            
            }   
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
         
             
             
        
         
         
     }
     
}
